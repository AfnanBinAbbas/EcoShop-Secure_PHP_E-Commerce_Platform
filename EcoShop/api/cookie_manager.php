<?php
/**
 * Cookie Manager for EcoShop
 * Handles session cookies and order cookies functionality
 */

require_once 'config.php';

class CookieManager {
    private $cookieFile;
    private $orderCookieFile;
    
    public function __construct() {
        $this->cookieFile = __DIR__ . '/../cookies.txt';
        $this->orderCookieFile = __DIR__ . '/../order_cookies.txt';
        
        // Ensure cookie files exist with proper permissions
        $this->initializeCookieFiles();
    }
    
    /**
     * Initialize cookie files if they don't exist
     */
    private function initializeCookieFiles() {
        $cookieHeader = "# Netscape HTTP Cookie File\n# https://curl.se/docs/http-cookies.html\n# This file was generated by libcurl! Edit at your own risk.\n\n";
        
        if (!file_exists($this->cookieFile)) {
            file_put_contents($this->cookieFile, $cookieHeader);
            chmod($this->cookieFile, 0600); // Secure permissions
        }
        
        if (!file_exists($this->orderCookieFile)) {
            file_put_contents($this->orderCookieFile, $cookieHeader);
            chmod($this->orderCookieFile, 0600); // Secure permissions
        }
    }
    
    /**
     * Save session cookie to cookies.txt
     * @param string $sessionId Session ID
     * @param string $domain Domain (default: localhost)
     * @param int $expiry Expiry timestamp (default: session cookie)
     */
    public function saveSessionCookie($sessionId, $domain = 'localhost', $expiry = 0) {
        try {
            $cookieLine = $this->formatCookieLine($domain, 'PHPSESSID', $sessionId, '/', false, $expiry);
            $this->updateCookieFile($this->cookieFile, 'PHPSESSID', $cookieLine);
            
            logSecurityEvent('session_cookie_saved', [
                'session_id' => substr($sessionId, 0, 8) . '...',
                'domain' => $domain
            ]);
            
            return true;
        } catch (Exception $e) {
            error_log("Failed to save session cookie: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Save order-specific cookie to order_cookies.txt
     * @param string $sessionId Session ID for order
     * @param string $domain Domain (default: localhost)
     * @param int $expiry Expiry timestamp (default: 1 hour)
     */
    public function saveOrderCookie($sessionId, $domain = 'localhost', $expiry = null) {
        try {
            if ($expiry === null) {
                $expiry = time() + 3600; // 1 hour default
            }
            
            $cookieLine = $this->formatCookieLine($domain, 'PHPSESSID', $sessionId, '/', false, $expiry);
            $this->updateCookieFile($this->orderCookieFile, 'PHPSESSID', $cookieLine);
            
            logSecurityEvent('order_cookie_saved', [
                'session_id' => substr($sessionId, 0, 8) . '...',
                'domain' => $domain,
                'expiry' => date('Y-m-d H:i:s', $expiry)
            ]);
            
            return true;
        } catch (Exception $e) {
            error_log("Failed to save order cookie: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Read session cookie from cookies.txt
     * @return string|null Session ID or null if not found
     */
    public function getSessionCookie() {
        try {
            return $this->getCookieValue($this->cookieFile, 'PHPSESSID');
        } catch (Exception $e) {
            error_log("Failed to read session cookie: " . $e->getMessage());
            return null;
        }
    }
    
    /**
     * Read order cookie from order_cookies.txt
     * @return string|null Session ID or null if not found
     */
    public function getOrderCookie() {
        try {
            return $this->getCookieValue($this->orderCookieFile, 'PHPSESSID');
        } catch (Exception $e) {
            error_log("Failed to read order cookie: " . $e->getMessage());
            return null;
        }
    }
    
    /**
     * Clear session cookie
     */
    public function clearSessionCookie() {
        try {
            $this->removeCookieFromFile($this->cookieFile, 'PHPSESSID');
            logSecurityEvent('session_cookie_cleared');
            return true;
        } catch (Exception $e) {
            error_log("Failed to clear session cookie: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Clear order cookie
     */
    public function clearOrderCookie() {
        try {
            $this->removeCookieFromFile($this->orderCookieFile, 'PHPSESSID');
            logSecurityEvent('order_cookie_cleared');
            return true;
        } catch (Exception $e) {
            error_log("Failed to clear order cookie: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Format cookie line for Netscape format
     * @param string $domain
     * @param string $name
     * @param string $value
     * @param string $path
     * @param bool $secure
     * @param int $expiry
     * @return string
     */
    private function formatCookieLine($domain, $name, $value, $path = '/', $secure = false, $expiry = 0) {
        $includeSubdomains = 'FALSE';
        $secureFlag = $secure ? 'TRUE' : 'FALSE';
        
        return sprintf(
            "%s\t%s\t%s\t%s\t%d\t%s\t%s",
            $domain,
            $includeSubdomains,
            $path,
            $secureFlag,
            $expiry,
            $name,
            $value
        );
    }
    
    /**
     * Update cookie file with new cookie line
     * @param string $filePath
     * @param string $cookieName
     * @param string $cookieLine
     */
    private function updateCookieFile($filePath, $cookieName, $cookieLine) {
        if (!file_exists($filePath)) {
            $this->initializeCookieFiles();
        }
        
        $lines = file($filePath, FILE_IGNORE_NEW_LINES);
        $newLines = [];
        $cookieUpdated = false;
        
        foreach ($lines as $line) {
            if (strpos($line, '#') === 0 || trim($line) === '') {
                // Keep comments and empty lines
                $newLines[] = $line;
            } else {
                $parts = explode("\t", $line);
                if (count($parts) >= 6 && $parts[5] === $cookieName) {
                    // Replace existing cookie
                    $newLines[] = $cookieLine;
                    $cookieUpdated = true;
                } else {
                    // Keep other cookies
                    $newLines[] = $line;
                }
            }
        }
        
        // Add new cookie if not updated
        if (!$cookieUpdated) {
            $newLines[] = $cookieLine;
        }
        
        file_put_contents($filePath, implode("\n", $newLines) . "\n");
    }
    
    /**
     * Get cookie value from file
     * @param string $filePath
     * @param string $cookieName
     * @return string|null
     */
    private function getCookieValue($filePath, $cookieName) {
        if (!file_exists($filePath)) {
            return null;
        }
        
        $lines = file($filePath, FILE_IGNORE_NEW_LINES);
        
        foreach ($lines as $line) {
            if (strpos($line, '#') === 0 || trim($line) === '') {
                continue;
            }
            
            $parts = explode("\t", $line);
            if (count($parts) >= 7 && $parts[5] === $cookieName) {
                // Check if cookie is expired
                $expiry = (int)$parts[4];
                if ($expiry > 0 && $expiry < time()) {
                    continue; // Skip expired cookies
                }
                
                return $parts[6];
            }
        }
        
        return null;
    }
    
    /**
     * Remove cookie from file
     * @param string $filePath
     * @param string $cookieName
     */
    private function removeCookieFromFile($filePath, $cookieName) {
        if (!file_exists($filePath)) {
            return;
        }
        
        $lines = file($filePath, FILE_IGNORE_NEW_LINES);
        $newLines = [];
        
        foreach ($lines as $line) {
            if (strpos($line, '#') === 0 || trim($line) === '') {
                // Keep comments and empty lines
                $newLines[] = $line;
            } else {
                $parts = explode("\t", $line);
                if (count($parts) >= 6 && $parts[5] === $cookieName) {
                    // Skip this cookie (remove it)
                    continue;
                } else {
                    // Keep other cookies
                    $newLines[] = $line;
                }
            }
        }
        
        file_put_contents($filePath, implode("\n", $newLines) . "\n");
    }
    
    /**
     * Clean expired cookies from both files
     */
    public function cleanExpiredCookies() {
        $this->cleanExpiredCookiesFromFile($this->cookieFile);
        $this->cleanExpiredCookiesFromFile($this->orderCookieFile);
    }
    
    /**
     * Clean expired cookies from specific file
     * @param string $filePath
     */
    private function cleanExpiredCookiesFromFile($filePath) {
        if (!file_exists($filePath)) {
            return;
        }
        
        $lines = file($filePath, FILE_IGNORE_NEW_LINES);
        $newLines = [];
        $currentTime = time();
        
        foreach ($lines as $line) {
            if (strpos($line, '#') === 0 || trim($line) === '') {
                // Keep comments and empty lines
                $newLines[] = $line;
            } else {
                $parts = explode("\t", $line);
                if (count($parts) >= 7) {
                    $expiry = (int)$parts[4];
                    // Keep session cookies (expiry = 0) and non-expired cookies
                    if ($expiry === 0 || $expiry > $currentTime) {
                        $newLines[] = $line;
                    }
                }
            }
        }
        
        file_put_contents($filePath, implode("\n", $newLines) . "\n");
    }
    
    /**
     * Get all cookies from a file
     * @param string $filePath
     * @return array
     */
    public function getAllCookies($filePath = null) {
        if ($filePath === null) {
            $filePath = $this->cookieFile;
        }
        
        if (!file_exists($filePath)) {
            return [];
        }
        
        $cookies = [];
        $lines = file($filePath, FILE_IGNORE_NEW_LINES);
        
        foreach ($lines as $line) {
            if (strpos($line, '#') === 0 || trim($line) === '') {
                continue;
            }
            
            $parts = explode("\t", $line);
            if (count($parts) >= 7) {
                $expiry = (int)$parts[4];
                // Skip expired cookies
                if ($expiry > 0 && $expiry < time()) {
                    continue;
                }
                
                $cookies[] = [
                    'domain' => $parts[0],
                    'include_subdomains' => $parts[1] === 'TRUE',
                    'path' => $parts[2],
                    'secure' => $parts[3] === 'TRUE',
                    'expiry' => $expiry,
                    'name' => $parts[5],
                    'value' => $parts[6]
                ];
            }
        }
        
        return $cookies;
    }
}

/**
 * Global cookie manager instance
 */
function getCookieManager() {
    static $cookieManager = null;
    if ($cookieManager === null) {
        $cookieManager = new CookieManager();
    }
    return $cookieManager;
}

/**
 * Helper function to save session cookie
 */
function saveSessionCookie($sessionId, $domain = 'localhost') {
    return getCookieManager()->saveSessionCookie($sessionId, $domain);
}

/**
 * Helper function to save order cookie
 */
function saveOrderCookie($sessionId, $domain = 'localhost', $expiry = null) {
    return getCookieManager()->saveOrderCookie($sessionId, $domain, $expiry);
}

/**
 * Helper function to get session cookie
 */
function getSessionCookie() {
    return getCookieManager()->getSessionCookie();
}

/**
 * Helper function to get order cookie
 */
function getOrderCookie() {
    return getCookieManager()->getOrderCookie();
}

/**
 * Helper function to clear session cookie
 */
function clearSessionCookie() {
    return getCookieManager()->clearSessionCookie();
}

/**
 * Helper function to clear order cookie
 */
function clearOrderCookie() {
    return getCookieManager()->clearOrderCookie();
}
?>

